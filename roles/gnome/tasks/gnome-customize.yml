---
# tasks file for PeterMosmans.customize-gnome

- name: Parse Gnome Shell version
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      gnome-shell --version | sed 's/^[^0-9.]*//' | sed 's/[^0-9]*$//'
    executable: /bin/bash
  register: r_gnome_extension_parse_shell_version
  changed_when: false

- name: Disable wayland and use x11
  become: true
  become_user: root
  ansible.builtin.lineinfile:
    path: /etc/gdm3/custom.conf
    regexp: '^#?WaylandEnable=(false|true)$'
    line: 'WaylandEnable=false'

- name: Set Gnome Shell version as parameter
  ansible.builtin.set_fact:
    gnome_shell_version: "{{ r_gnome_extension_parse_shell_version.stdout }}"

- name: Check if Gnome Shell was detected
  ansible.builtin.debug:
    msg: "Sorry - no Gnome Shell detected... exiting"
  failed_when: true
  when: not r_gnome_extension_parse_shell_version.stdout

- name: Remove built in ubuntu dock extension
  become: true #needed
  become_user: root
  apt:
    name: gnome-shell-extension-ubuntu-dock
    state: absent

- name: Install (font) packages
  become: true #needed
  become_user: root
  apt:
    name: "{{ item }}"
    update_cache: true
    install-recommends: false
    state: latest
  loop: "{{ gnome_packages|default([]) }}"

- name: Ensure that target directory exists
  ansible.builtin.file:
    path: "/home/{{ user }}/.config/{{ gtk_version }}"
    state: directory
  
  become: true
  when: gtk_version is defined

- name: Copy files
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: 0644
  loop: "{{ gnome_files|default([]) }}"
  loop_control:
    label: "{{ item.src }}"
  tags:
    - files

- name: Install fonts
  ansible.builtin.include_tasks:
    file: install_font.yml
  loop: "{{ gnome_fonts | default([]) }}"
  loop_control:
    label: "{{ gnome_font.name }}"
    loop_var: gnome_font
  tags:
    - fonts

- name: Refresh font list
  ansible.builtin.command: fc-cache -fv
  changed_when: false
  tags:
    - fonts

- name: Create a list of current enabled extensions
  
  become: true
  ansible.builtin.shell: gnome-extensions list --enabled > /tmp/before.txt

- name: Load Gnome extension information
  include_tasks: get-extension-info.yml
  loop: "{{ gnome_extensions|default([]) }}"

- name: Download GNOME Shell extensions
  
  become: true
  ansible.builtin.get_url:
    url: "{{ item.url }}"
    dest: "/tmp/{{ item.name }}.zip"
    mode: 0644
  loop: "{{ gnome_extensions_full|default([]) }}"
  loop_control:
    label: "{{ item.name }}"
  tags:
    - extensions

- name: Install GNOME extensions
  ansible.builtin.command: gnome-extensions install "/tmp/{{ item.name }}.zip" --force
  
  become: true
  loop: "{{ gnome_extensions_full|default([]) }}"
  loop_control:
    label: "{{ item.name }}"
  changed_when: yes
  register: installed_result
  ignore_errors: true

- name: Restart Gnome Shell to ensure all extensions are visible
  
  become: true
  ansible.builtin.command:
    cmd: killall -3 gnome-shell
  when: installed_result.changed and true == false

- name: Wait for gnome to restart
  ansible.builtin.wait_for:
    timeout: 5
  delegate_to: localhost

- name: Enable extensions 
  ansible.builtin.command: gnome-extensions enable {{ item.name }}
  
  become: true
  when:
    - item.enable | default(false)
  loop: "{{ gnome_extensions_full|default([]) }}"
  loop_control:
    label: "{{ item.name }}"
  changed_when: yes # Unfortunately the command does not return anything, so we can't know if it changed anything
  tags:
    - settings
  ignore_errors: true

- name: Create a list of enabled extensions
  
  become: true
  ansible.builtin.shell: gnome-extensions list --enabled > /tmp/after.txt
  changed_when: false

- name: Compare the list of enabled extensions
  ansible.builtin.shell: diff --ignore-all-space /tmp/before.txt /tmp/after.txt|awk '/[<>]/{print $2}'
  register: difference
  changed_when: false

- debug:
    msg: "Changes in enabled extensions: {{ difference.stdout }}"
  when: difference.stdout

- name: Modify application settings using gsettings
  ansible.builtin.command:
    cmd: gsettings {{ ('--schemadir ' + item.schemadir) if 'schemadir' in item else '' }} set {{ item.schema }} {{ item.key }} {{ item.value }}
  become: true
  changed_when: false
  loop: "{{ gnome_gsettings|default([]) }}"
  loop_control:
    label: "{{ item.key }}"
  tags:
    - settings

- name: Modify application settings using dconf
  community.general.dconf:
    key: "{{ item.key }}"
    value: "{{ item.value }}"
  become: true
  loop: "{{ gnome_dconf|default([]) }}"
  loop_control:
    label: "{{ item.key }}"
  tags:
    - settings
    - dconf
